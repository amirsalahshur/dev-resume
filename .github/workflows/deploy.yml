name: Deploy Portfolio

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and build job
  test-and-build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Build application
        run: npm run build

      - name: Test build output
        run: |
          test -f dist/index.html
          test -d dist/assets
          echo "Build verification passed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: portfolio-build
          path: |
            dist/
            package*.json
            ecosystem.config.js
            scripts/
          retention-days: 7

      # Docker build and push
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.test-and-build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && vars.ENABLE_STAGING_DEPLOY == 'true'
    environment:
      name: staging
      url: ${{ vars.STAGING_URL || 'https://staging.your-domain.com' }}
    
    steps:
      - name: Check required secrets
        run: |
          if [[ -z "${{ secrets.STAGING_HOST }}" ]]; then
            echo "::warning::STAGING_HOST secret not configured"
            exit 1
          fi
          if [[ -z "${{ secrets.STAGING_SSH_KEY }}" ]]; then
            echo "::warning::STAGING_SSH_KEY secret not configured"
            exit 1
          fi

      - name: Deploy to staging
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER || 'portfolio' }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT || 22 }}
          script: |
            cd /var/www/portfolio-staging
            git pull origin main
            docker-compose pull
            docker-compose up -d --remove-orphans
            docker system prune -f

      - name: Wait for staging deployment
        run: sleep 30

      - name: Health check staging
        run: |
          STAGING_URL="${{ vars.STAGING_URL || 'https://staging.your-domain.com' }}"
          curl -f $STAGING_URL/health || exit 1
          echo "Staging deployment successful"

      - name: Run staging tests
        run: |
          STAGING_URL="${{ vars.STAGING_URL || 'https://staging.your-domain.com' }}"
          curl -f $STAGING_URL/ || exit 1
          echo "Staging tests passed"

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: |
      ((github.ref == 'refs/heads/production' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')) &&
      (vars.ENABLE_PRODUCTION_DEPLOY != 'false')
    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL || 'https://your-domain.com' }}
    
    steps:
      - name: Check required secrets
        run: |
          if [[ -z "${{ secrets.PRODUCTION_HOST }}" ]]; then
            echo "::error::PRODUCTION_HOST secret not configured"
            exit 1
          fi
          if [[ -z "${{ secrets.PRODUCTION_SSH_KEY }}" ]]; then
            echo "::error::PRODUCTION_SSH_KEY secret not configured"
            exit 1
          fi
          echo "All required secrets are configured"

      - name: Checkout deployment scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: scripts/

      - name: Deploy to production with zero downtime
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER || 'portfolio' }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || 22 }}
          script: |
            cd /var/www/portfolio
            
            # Pull latest changes
            git pull origin main
            
            # Run zero-downtime deployment
            sudo -u portfolio ./scripts/deploy.sh
            
            # Verify deployment
            sudo -u portfolio ./scripts/deploy.sh --health-check

      - name: Wait for production deployment
        run: sleep 60

      - name: Production health check
        run: |
          PRODUCTION_URL="${{ vars.PRODUCTION_URL || 'https://your-domain.com' }}"
          for i in {1..10}; do
            if curl -f -s "$PRODUCTION_URL" > /dev/null; then
              echo "Production health check passed"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done
          echo "Production health check failed"
          exit 1

      - name: Run production smoke tests
        run: |
          PRODUCTION_URL="${{ vars.PRODUCTION_URL || 'https://your-domain.com' }}"
          # Test main page
          curl -f $PRODUCTION_URL/ || exit 1
          
          # Test assets loading
          curl -f -I $PRODUCTION_URL/assets/ || true
          
          # Test security headers
          curl -I $PRODUCTION_URL/ | grep -i "strict-transport-security" || exit 1
          
          echo "Production smoke tests passed"

      - name: Performance test
        run: |
          PRODUCTION_URL="${{ vars.PRODUCTION_URL || 'https://your-domain.com' }}"
          # Simple performance check using curl
          response_time=$(curl -o /dev/null -s -w '%{time_total}\n' $PRODUCTION_URL/)
          # Use awk instead of bc for better compatibility
          if awk "BEGIN {exit !($response_time > 2.0)}"; then
            echo "Warning: Response time is ${response_time}s (>2s)"
          else
            echo "Performance check passed: ${response_time}s"
          fi

  # Rollback job (manual trigger)
  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment:
      name: production
    
    steps:
      - name: Rollback production deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || 22 }}
          script: |
            cd /var/www/portfolio
            sudo -u portfolio ./scripts/deploy.sh --rollback

      - name: Verify rollback
        run: |
          sleep 30
          curl -f https://your-domain.com/health || exit 1
          echo "Rollback successful"

  # Cleanup old images
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: 'container'
          min-versions-to-keep: 5
          delete-only-untagged-versions: true

  # Notification job
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && secrets.SLACK_WEBHOOK != ''
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}